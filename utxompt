#!/usr/bin/env python3

import json
import sys
import plyvel

from storage.refcount_db import RefcountDB
from trie.trie import Trie

def beautify(thing):
    """Convert a nested list of bytes into nested list of hex encoded strings"""
    if type(thing) == list:
        retval = []
        for item in thing:
            retval.append(beautify(item))
        return retval
    elif type(thing) == bytes:
        return thing.hex()
    else:
        print(type(thing))
        sys.exit(1)
        
def jnk():
    db = plyvel.DB('./db/', create_if_missing=True)
    mpt = Trie(RefcountDB(db))

    key1 = 'hello there'
    mpt.update(key1.encode(), b'v1')
    print(mpt.root_hash.hex())

    key2 = 'hello again'
    mpt.update(key2.encode(), b'v2')
    print(mpt.root_hash.hex())
    
    vv, proof = mpt.get(key2, with_proof=True)
    proof.append(mpt.root_node)
    print(proof)

def process_lines():
    db = plyvel.DB('./db/', create_if_missing=True)
    mpt = Trie(RefcountDB(db))

    coinbase_txid = bytes.fromhex(
        '0000000000000000000000000000000000000000000000000000000000000000'
    )

    ninputs = 0
    for line in map(str.rstrip, sys.stdin):
        fields = line.split(':')
        if fields[0] == 'O':
            txid = bytes.fromhex(fields[1])
            index = int(fields[2])
            ndx = index.to_bytes(4, byteorder='big')
            amount = int(fields[3])
            amt = amount.to_bytes(8, byteorder='big')
            print(txid.hex(), index, amount)
            key = txid[0:28] + ndx	# BOGUS - need 36 byte keys!
            mpt.update(key, amt)
        elif fields[0] == 'I':
            dixt = bytes.fromhex(fields[1])
            txid = dixt[::-1]
            index = int(fields[2])
            ndx = index.to_bytes(4, byteorder='big')
            if txid != coinbase_txid:
                ninputs += 1
                print(txid.hex(), index)
                key = txid[0:28] + ndx	# BOGUS - need 36 byte keys!

                # Print out proof every 1000 inputs
                if ninputs % 1000 == 0:
                    vv, proof = mpt.get(key, with_proof=True)
                    proof.insert(0, mpt.root_node)
                    print("Proof for %s:%d" % (txid.hex(), index))
                    print(json.dumps(beautify(proof), indent=4))
                
                # mpt.delete(key)
                amt = b''		# BOGUS
                mpt.update(key, amt)	# BOGUS


        else:
            sys.exit("unknown first field: %s" % (fields[0],))
    

if __name__ == '__main__':
    # jnk()
    process_lines()
