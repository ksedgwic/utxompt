#!/usr/bin/env python3

import json
import sys

from trie import HexaryTrie

def beautify(thing):
    """Convert a nested list of bytes into nested list of hex encoded strings"""
    if type(thing) == list:
        retval = []
        for item in thing:
            retval.append(beautify(item))
        return retval
    elif type(thing) == tuple:
        retval = []
        for item in thing:
            retval.append(beautify(item))
        return tuple(retval)
    elif type(thing) == bytes:
        return thing.hex()
    else:
        print(type(thing))
        sys.exit(1)
        
def jnk():
    db = {}
    mpt = HexaryTrie(db)

    key1 = 'hello there'.encode()
    mpt[key1] = b'v1'
    print(mpt.root_hash.hex())

    key2 = 'hello again'.encode()
    mpt[key2] = b'v2'
    print(mpt.root_hash.hex())

    proof = mpt.get_proof(key2)
    vv = HexaryTrie.get_from_proof(mpt.root_hash, key2, proof)
    print(proof)

def process_lines():
    db = {}
    mpt = HexaryTrie(db)

    coinbase_txid = bytes.fromhex(
        '0000000000000000000000000000000000000000000000000000000000000000'
    )

    nutxo = 0
    ninputs = 0
    for line in map(str.rstrip, sys.stdin):
        fields = line.split(':')
        if fields[0] == 'O':
            txid = bytes.fromhex(fields[1])
            index = int(fields[2])
            ndx = index.to_bytes(4, byteorder='big')
            amount = int(fields[3])
            amt = amount.to_bytes(8, byteorder='big')
            print(txid.hex(), index, amount)
            key = txid[0:28] + ndx	# BOGUS - need 36 byte keys!
            mpt[key] = amt
            nutxo += 1
        elif fields[0] == 'I':
            dixt = bytes.fromhex(fields[1])
            txid = dixt[::-1]
            index = int(fields[2])
            ndx = index.to_bytes(4, byteorder='big')
            if txid != coinbase_txid:
                ninputs += 1
                print(txid.hex(), index)
                key = txid[0:28] + ndx	# BOGUS - need 36 byte keys!

                # Print out proof every 1000 inputs
                if ninputs % 1000 == 0:
                    proof = mpt.get_proof(key)
                    vv = HexaryTrie.get_from_proof(mpt.root_hash, key, proof)
                    print("UTXO Count %d" % (nutxo,))
                    print("Proof for %s:%d" % (txid.hex(), index))
                    print(json.dumps(beautify(proof), indent=4))

                del mpt[key]

        else:
            sys.exit("unknown first field: %s" % (fields[0],))
    

if __name__ == '__main__':
    # jnk()
    process_lines()
